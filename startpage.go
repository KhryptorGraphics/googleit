package googleit

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/PuerkitoBio/goquery"
	log "github.com/schollz/logger"
)

func StartPage(query string, ops ...Options) (urls []string, err error) {
	if httpClient == nil {
		if len(ops) > 0 {
			httpClient, err = GetClient(ops[0].UseTor)
		} else {
			httpClient, err = GetClient(false)
		}
		if err != nil {
			return
		}
	}

	pageLimit := 10
	if len(ops) > 0 {
		pageLimit = ops[0].NumPages
	}
	if pageLimit < 1 {
		pageLimit = 10
	}

	currentCount := 1
	urls = []string{}
	escapedQuery, _ := url.QueryUnescape(query)
	for i := 0; i < pageLimit; i++ {
		// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

		body := strings.NewReader(`query=` + escapedQuery + `&cat=web&cmd=process_search&language=english&engine0=v1all&abp=1`)
		req, err2 := http.NewRequest("POST", "https://www.startpage.com/do/search", body)
		if err2 != nil {
			err = err2
			return
		}
		req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:68.0) Gecko/20100101 Firefox/68.0")
		req.Header.Set("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8")
		req.Header.Set("Accept-Language", "en-US,en;q=0.5")
		req.Header.Set("Referer", "https://www.startpage.com/")
		req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
		req.Header.Set("Connection", "keep-alive")
		req.Header.Set("Upgrade-Insecure-Requests", "1")

		resp, err2 := httpClient.Client.Do(req)
		if err2 != nil {
			err = err2
			return
		}
		var newURLs []string
		newURLs, err2 = captureStartPage(resp)
		if err2 != nil {
			err = err2
			return
		}
		if len(newURLs) == 0 {
			break
		}
		urls = append(urls, newURLs...)
		currentCount += len(newURLs)
		break
	}

	urls = ListToSet(urls)
	return
}

func captureStartPage(res *http.Response) (urls []string, err error) {
	defer res.Body.Close()
	// Load the HTML document
	doc, err := goquery.NewDocumentFromReader(res.Body)
	if err != nil {
		return
	}

	// Find the urls
	urls = []string{}
	doc.Find(".w-gl__result-title").Each(func(i int, s *goquery.Selection) {
		href, ok := s.Attr("href")
		if !ok {
			return
		}
		href, _ = url.QueryUnescape(href)
		if strings.Contains(href, "=http") {
			href = "http" + strings.Split(href, "=http")[1]
		}
		if !strings.Contains(href, "http") || strings.Contains(href, "bing") || strings.Contains(href, "bing.co") || strings.Contains(href, "clickserve") {
			return
		}
		urls = append(urls, href)
		log.Trace(href)
	})

	return
}
